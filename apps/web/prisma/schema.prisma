// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Enum to define the roles of a user
enum Role {
  ADMIN
  USER
}

/// This model represents a user in the system.
model User {
  id               Int            @id @default(autoincrement()) // Auto-incremented User ID
  idAuth0          String         @unique // Auth0 ID for authentication
  name             String // User's name
  email            String         @unique // User's email
  jobPosition      String // Job position of the user
  role             Role           @default(USER) // Role of the user (Admin/User)
  image            String // Profile image URL
  creditsRemaining Float // Remaining credits for models API usage
  groups           Group[] // Groups the user belongs to
  conversations    Conversation[] // Conversations initiated by the user
  tags             Tag[] // Tags created by the user
  globalParameters Json // Global parameters used by the user
  //apiKeys   ApiKeys[] // API keys generated by the user
}

/// This model represents a group in the system.
model Group {
  id              Int    @id @default(autoincrement()) // Auto-incremented Group ID
  name            String // Name of the group
  description     String // Description of the group
  creditsAssigned Float // Total credits assigned to this group
  users           User[] // Users belonging to this group
}

/// This model represents a conversation in the system.
model Conversation {
  id         Int       @id @default(autoincrement()) // Auto-incremented Conversation ID
  idUser     Int // User ID initiating the conversation
  user       User      @relation(fields: [idUser], references: [id]) // Relation to User
  idModel    Int // Model ID used in the conversation
  model      Model     @relation(fields: [idModel], references: [id]) // Relation to Model
  title      String // Title of the conversation
  messages   Message[] // Messages in the conversation
  tags       Tag[] // Tags associated with the conversation
  parameters Json // Parameters used in the conversation
  createdAt  DateTime  @default(now()) // Timestamp of conversation creation
  active     Boolean   @default(true) // Whether the conversation is active or not
}

/// Enum to define the sender of a message
enum Sender {
  USER
  MODEL
}

/// This model represents a message in the system.
model Message {
  id             Int          @id @default(autoincrement()) // Auto-incremented Message ID
  idConversation Int // Conversation ID
  conversation   Conversation @relation(fields: [idConversation], references: [id]) // Relation to Conversation
  sender         Sender // Sender of the message (User/Model)
  content        String // Content of the message
  creditsUsed    Float // Credits used for this message
  createdAt      DateTime     @default(now()) // Timestamp of message creation
}

/// This model represents a tag the user can use in conversations in the system.
model Tag {
  id            Int            @id @default(autoincrement()) // Auto-incremented Tag ID
  idUser        Int // User ID who created the tag
  user          User           @relation(fields: [idUser], references: [id]) // Relation to User
  conversations Conversation[] // Conversations using this tag
  name          String // Name of the tag
  color         String // Color code for the tag
}

/// This model represents the providers used in the system.
model Provider {
  id     Int     @id @default(autoincrement()) // Auto-incremented Provider ID
  name   String // Name of the provider
  image  String // Logo or image of the provider
  models Model[] // Models provided by this provider
}

/// Enum to define the type of AI model
enum ModelType {
  TEXT
  IMAGE
}

/// This model represents the AI models used in the system.
model Model {
  id            Int            @id @default(autoincrement()) // Auto-incremented Model ID
  idProvider    Int // Provider ID
  provider      Provider       @relation(fields: [idProvider], references: [id]) // Relation to Provider
  name          String // Name of the model
  active        Boolean        @default(true) // Whether the model is active or not
  modelType     ModelType // Type of the model (Text/Image)
  description   Json // Description of the model in json format
  conversations Conversation[] // Conversations using this model
}

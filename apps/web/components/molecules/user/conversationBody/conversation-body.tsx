/**
 * ConversationBody component that displays a chat interface and handles user input and AI responses.
 * @returns JSX.Element
 */
"use client";
import React, { useState, useEffect } from 'react';
import MessageList from './message-list';
import PromptTextInput from './prompt-text-input';
import { useChat, } from "ai/react"
import type { Message } from "ai/react"
import { Sender, type Message as WizepromptMessage } from "@prisma/client";
import type { UseChatOptions } from "ai";
import type { MessageDataInput } from "@/lib/message";
import { calculateCredits, calculateTokens } from '@/lib/helper/gpt/credits-and-tokens';
import { convertToGptMessage } from '@/lib/helper/gpt/convert-message-type';

const providerImage =
    "https://avatars.githubusercontent.com/u/86160567?s=200&v=4"; // URL de la imagen del remitente

const userImage = "https://ui-avatars.com/api/?background=007CFF&color=fff&name=David";

/**
 * Extended options for the useChat hook.
 */
interface ExtendedUseChatOptions extends UseChatOptions {
    /**
     * An array of messages to be displayed in the conversation body.
     */
    messages: Message[];
    /**
     * The temperature of the conversation, represented as a number.
     */
    temperature: number;
    /**
     * Custom instructions for the conversation.
     */
    customInstructions: string;
}

/**
 * Saves a message to the server.
 * @param message The message to be saved.
 * @returns A Promise that resolves when the message is successfully saved, or rejects if an error occurs.
 */
async function saveMessage(message: MessageDataInput): Promise<void> {
    try {
        await fetch('/api/messages', {
            method: 'POST',
            body: JSON.stringify(message)
        });
    } catch {
        console.log("Error ocurred while saving message.")
    }
}

export default function ConversationBody(): JSX.Element {
    const [messageData, setMessageData] = useState<Message[]>([])
   // const [wizepromptMessageData, setWizepromptMessageData] = useState<WizepromptMessage[]>([])

    // Function that fetches data from messages api route and 
    // sets the content of a message to the first content instance
    const getData: () => Promise<void> = async () => {
        const response: Response = await fetch('/api/messages/conversation/1');
        const data: WizepromptMessage[] = await response.json();
        const processedData: Message[] = data.map(convertToGptMessage);
        setMessageData(processedData);
        //setWizepromptMessageData(data);
    };


    useEffect(() => {
        void getData()
    })

    const options: ExtendedUseChatOptions = {
        api: '/api/ai/openai/gpt-4',
        initialMessages: messageData,
        messages: messageData,
        temperature: 0.5,
        customInstructions: "",
        // onFinish callback function that runss when the response stream is finished
        // Saves the message generated by the model
        onFinish(message) {
            const tokens: number = calculateTokens(message.content)
            const messageInfo: MessageDataInput = {
                idConversation: 1,
                content: message.content,
                sender: message.role === 'user' ? Sender.USER : Sender.MODEL,
                creditsUsed: calculateCredits(tokens, 'gpt-3.5-turbo', false)
            }
            void saveMessage(messageInfo)
        },
    };

    // set api route that handleSubmit will use and load initial messages
    const {
        input, // The current value of the input field.
        handleInputChange, // Handler for the onChange event of the input field to control the input's value.
        handleSubmit, // Form submission handler that automatically resets the input field and appends a user message.
        messages, // The current array of chat messages.
        /*
       isLoading, // Boolean flag indicating whether a request is currently in progress.
       stop, // Function that aborts the current request
       reload,//Function to reload the last AI chat response for the given chat history.
       append, //append(message: Message | CreateMessage, chatRequestOptions: { options: { headers, body } }) Function to append a message to the chat, triggering an API call for the AI response.
       error, //An error object returned by SWR, if any.
       */
    } = useChat(options);



    return (
        <div className="pb-36">
            <MessageList messages={messages} providerImage={providerImage} userImage={userImage} />
            <PromptTextInput input={input} handleInputChange={handleInputChange} handleSubmit={handleSubmit} />
        </div>
    );
}
